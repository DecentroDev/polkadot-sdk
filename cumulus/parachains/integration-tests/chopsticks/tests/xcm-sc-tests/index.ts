import { readFileSync } from "fs";
import { parseArgs } from "util";
import {
	createWalletClient,
	defineChain,
	getContract,
	http,
	parseAbi,
	parseEther,
	publicActions,
} from "viem";
import { privateKeyToAccount } from "viem/accounts";

const {
	values: { endowment, ["private-key"]: privateKey, n },
} = parseArgs({
	args: process.argv.slice(2),
	options: {
		["private-key"]: {
			type: "string",
			short: "k",
		},
		endowment: {
			type: "string",
			short: "e",
		},
		n: {
			type: "string",
			short: "n",
		},
	},
});

export function assert(condition: any, message: string): asserts condition {
	if (!condition) {
		throw new Error(message);
	}
}

const rpcUrl = "http://localhost:8545";

export const chain = defineChain({
	id: 420420421,
	name: "Asset Hub Westend",
	network: "asset-hub",
	nativeCurrency: {
		name: "Westie",
		symbol: "WST",
		decimals: 18,
	},
	rpcUrls: {
		default: {
			http: [rpcUrl],
		},
	},
	testnet: true,
});

const wallet = createWalletClient({
	transport: http(),
	chain,
});
const [account] = await wallet.getAddresses();
export const serverWalletClient = createWalletClient({
	account,
	transport: http(),
	chain,
});

export const walletClient = await (async () => {
	if (privateKey) {
		const account = privateKeyToAccount(`0x${privateKey}`);
		console.log(`Wallet address ${account.address}`);

		const wallet = createWalletClient({
			account,
			transport: http(),
			chain,
		});

		if (endowment) {
			await serverWalletClient.sendTransaction({
				to: account.address,
				value: parseEther(endowment),
			});
			console.log(`Endowed address ${account.address} with: ${endowment}`);
		}

		return wallet.extend(publicActions);
	} else {
		return serverWalletClient.extend(publicActions);
	}
})();

const FibonacciAbi = parseAbi(["constructor()", "function fibonacci(uint) view returns(uint)"]);
const hash = await walletClient.deployContract({
	abi: FibonacciAbi,
	bytecode: `0x${Buffer.from(readFileSync("pvm/Fibonacci.polkavm")).toString("hex")}`,
});
const deployReceipt = await walletClient.waitForTransactionReceipt({ hash });
const rustContractAddress = deployReceipt.contractAddress;
console.log("Rust Contract deployed:", rustContractAddress);
assert(rustContractAddress, "Contract address should be set");

const rustContract = getContract({
	address: rustContractAddress, // Address of your deployed contract
	abi: FibonacciAbi,
	client: walletClient,
});

// Call the contract function
let resultRustCall;
try {
	resultRustCall = await rustContract.read.fibonacci([n]);
	console.log("Result Rust:", Number(resultRustCall));
} catch (error) {
	console.error("Error calling contract:", error);
}

const solidityContractAbi = [
	{
		inputs: [
			{
				internalType: "uint32",
				name: "n",
				type: "uint32",
			},
			{
				internalType: "contract IRustContract",
				name: "rustLib",
				type: "address",
			},
		],
		name: "fibonacciRust",
		outputs: [
			{
				internalType: "uint32",
				name: "",
				type: "uint32",
			},
		],
		stateMutability: "pure",
		type: "function",
	},
	{
		inputs: [
			{
				internalType: "uint32",
				name: "n",
				type: "uint32",
			},
		],
		name: "fibonacci",
		outputs: [
			{
				internalType: "uint32",
				name: "",
				type: "uint32",
			},
		],
		stateMutability: "pure",
		type: "function",
	},
];
const solidityContractHash = await walletClient.deployContract({
	abi: solidityContractAbi,
	bytecode:
		"0x50564d00008016000000000000010700c14000c000400480b20a000000000400000012000000200000002e0000003b0000004b0000005b000000660000007800000063616c6c63616c6c5f646174615f636f707963616c6c5f646174615f6c6f616463616c6c5f646174615f73697a657265665f74696d655f6c65667472657475726e5f646174615f636f707972657475726e5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e7366657272656405110292c00463616c6c92c7066465706c6f7906959e380292d05d0076007b009a00040135014b015d018101c602d80217031f0441046804a5048605a30507061d06d00612073d0766077807b2070908ad087d098c09340a780a830ada0bee0b370cdf0c770d0f0e9e0ec20e2e0f610f2a106010c310ee10171129118811ce1156128112aa12c712cf1264798b7a103307520a41330a000001ac8a39c8980883871f8477e054370000010a330732003908000002ae78143d0700000264783307200002c8870732003307200002c88707320032009511f07b10087b1584750133073308501002a73e070800020a03013e071000023b0520000351050750100409501006e7009511c07b10387b15307b16289515408411e064163307403308205010086bff5107b4003308080002210358000221035000022103480002140700000000000000807b68103e076000029517e08477e07b67186471491718491710491708490783770a0901826a1882a71082a81882a90882aad49808d4a707d4870752074c33078000330850100a01ff51074a826710837780007b6718330833090a0101390814000251080d330740000383770a080133078000330850100cd0fe510719330782681833090a07013307330850100ebafe5207040081681033070133093300100a07019511a0fe7b1058017b1550017b164801951560018411e0641633074033082050101284fe5107a20233090800023308100002210358000221035000027b68383908100002140700000000000000803e076000027b693021034800025418035e028367e00033080a02018167fc00514709a744e4dc0152471a0b9b9444029517e08477e07b67286471491718491710491708490783770a0901826a2882a71082a81882a90882aad49808d4a707d4870752070a0282673881775317440102836720013308040a020182693801826a3001826b2801826c2001d49b07d4ac08d47808988820d4a707977720d487075207cd017b6c187b6b207b6a287b6938836700013308240a020182671801826810018e79988a208eaadb790a1409ffffffff00000000d38909d47909939a520a8f0182690801826a00017b6a40826a187b6a607b69488269207b69687b68508268287b68707b675895678000956860956940826a387b6a78501014b704826780007b67383307403308205010162dfd51074b01826a3082a74882a85882a94082aa506f7b6f87d4b708d4a9096f99d49808988820d4b909979920d4980852081d0183773308207b6728501018eefc51070c01826738977720987920826830826728c8780a6f99461a1b461a1a461a1978a918461a17461a16461a15461a14461a13461a12461a11461a10461a0f461a0e461a0d461a0c461a0b461a0a461a09461a08461a07461a06461a05461a04461a03461a02461a01460a98983878a81f98983078a81e98982878a81d9899207b6a3878a91c330820330022285dfc9517e08477e07b67286471491718491710491708490783770a0901826a2882a71082a81882a90882aad49808d4a707d4870752073e826738817753172436836720013308040a02018269380182673001826a280182682001d49a0bd4780cd4bc0c98cc20d47b0b97bb20d4cb0b510b113307330850101ae6fb52077601007b6aa8007b68a0007b67b0009567c0009568a0007b69b80050101ced0c8267d8007b67188267d0007b67208267c8007b67288267c0007b673833074033082050101e9dfb5107bb826a3082a74882a85882a94082aa506f7b6f87d4b708d4a9096f99d49808988820d4b909979920d4980852088e83773308207b671050102060fb51077eff826730826210c8270c8267186f778268206f888269286f99826a386faa78ca1898ab3878cb1f98ab3078cb1e98ab2878cb1d98ab2078cb1c98ab1878cb1b98ab1078cb1a98aa0878ca1978c910989a3878ca17989a3078ca16989a2878ca15989a2078ca14989a1878ca13989a1078ca1298990878c91178c80898893878c90f98893078c90e98892878c90d98892078c90c98891878c90b98891078c90a98880878c80978c798783878c80798783078c80698782878c80598782078c80498781878c80398781078c8029877087b6c3878c70133082064275010227ffa51079dfe81683833092033070a070181683033070133093300240a07019511c07b10387b15307b16289515408411e0647683173308040a0201821718821810821908821ad4790bd48a0cd4bc0c98cc20d48b0b97bb20d4cb0b520b1f7b6a7b69087b68107b67189551c0821038821530821628951140320033073308501026fef9520704003308080002838833070133093300280a07019511d87b10207b15187b16108273188274108279088270828c828218828508828a1095c61fd8c60bc8b507d85705dabb05c85a08d8a80a8466e07b1008c86000d86006c8970bc86b0cd37c0bd87c05dab605c8480bc8b505d8b506d88b07c83202c8a208c88707c876068e678e58db6708d465078ecbdb780b520b72821708d87007d39c08d89c09da8709d84507d33608d8360ada870ad34507d48707da790a520a4b7b1c7b100833074033082050102a35f9510799006f6733080800026f59821a6faa821b086fbb3e0b6000023e0a5800023e095000023e074800028210208215188216109511283200330820330750102cf3f8510757330508000221032000022103180002210310000221030800024e487b7133070433082050102ec8f851072c4815200000004148151c48151848151448151048150c48150848150433082433075010309ff85207040083583307013309243300320a0701951100fe7b10f8017b15f0017b16e801951500028411e0829a107b1a28829a087b1a2082997b193082887b18187b1733074033082050103453f851072c0433060800023a075000023a084800023a095800023a0a6000026f7b6f876f986fa97b17507b1840d48707d4b908d478089888207b1b48d4b707977720d487075207e90383973308207b17587b1938501036fcf75107d5037b1610821a58c8a60646161f46161e46161d46161c46161b46161a46161946161846161746161646161546161446161346161246161146161046160f46160e46160d46160c46160b46160a46160946160846160746160646160546160446160309461602a70046160144821750821848d487071408fcffffff00000000821938d88908821940949894784606e4005108430383a7043308207b170850103858f751073103821718977720987820821710821908c897076f8846171b46171a46171978781846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460798893878791f98893078791e98892878791d98882078781c0a048217206f779778208219286f99989920d498088219306f99979a20987720d4a7079899207b1728017b1820017a1930014921580149215001492148014921400133082482175850103a88f65107610233082082175850103c79f651075202482160012049219801ff49219001ff49218801ff49218001ff4821a00118951820017b18a4014921b001ff4921a801ff951780017b17b801951740017b17bc017b16c0014821c401247b16c801951760017b17cc018317a0010a7b17300a06018218305208ec01551720470a067b17304911784911704911687b17608217487b1790008217407b1788008217387b178000951780009518608219507b19980050103eeefb82183056181f412896014921b8004921b0004921a8004921a000208217387b17c0008217407b17c8008217487b17d0009517c0009518a0008219507b19d800501040aafb33082082175850104282f551075b017c67117c68107c69127c6a13977708d4870797991097aa18d4a909d497077c68157c69147c6a167c6b17978808d4980897aa1097bb18d4ba0ad4a808978820d478027c68017c697c6a027c6b03978808d4980897aa1097bb18d4ba0ad4a8087c69057c6a047c6b067c6c07979908d4a90997bb1097cc18d4cb0bd4b909979920d498087c69197c6a187c6b1a7c6c1b979908d4a90997bb1097cc18d4cb0bd4b9097c6a1d7c6b1c7c6c1e7c671f97aa08d4ba0a97cc10977718d4c707d4a707977720d479097c67097c6a087c6b0a7c6c0b977708d4a70797bb1097cc18d4cb0bd4b7077c6a0d7c6b0c7c6c0e7c660f97aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a7076f7a6f996f886f27d4870bd4a90cd4bc0c98cc20d4ab0b97bb20d4cb0b520b26821b7bb97bb7087bba107bb818955100fe8210f8018215f0018216e801951100023200330733085010442bf452077804005207d20233074033082050104617f45107f0821a1082a74882a84082a95082aa586f766f8b6f976fa87b17507b1b48d4b7077b1858d46808d47808988820d46707977720d487075207b88117583308207b1740501048cef35107a7821710821840c8870946191f46191e46191d46191c46191b46191a46191946191846191746191646191546191446191346191246191146191046190f46190e46190d46190c46190b46190a461909461908461907461906461905461904461903a00046190279461901c300821b48d46b0b1408fcffffff00000000821a58d88a08821a5094a87b1b4894b87b1938460908510813ff821740837704330820647650104a26f35107fffe821710c8670746171f2046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617011408dcffffff00000000821958d8890882195094988219489498460751087bfe821740837624330820646750104c8ef2510767fe821710c8670746171f1846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617011408bcffffff00000000821958d889088219509498821948949846075108e3fd821740837744330820647650104ef6f15107cffd821710c8670746171f46171e46171d46171c46171b46171a46171946171846171764461716654617156c4617146946171361461712663306207876114617107446170f7346170e7546170d7278760c46170b6f46170a74330b6e787b0946170869787607330c67787c06787b05461704694617036c4617026c4617016146076333086482174050105067f1510740fd8118383307013309640a070a0628050a06017b175833074033082050105243f151071cfd821a1082a75882a85082a94882aa406f727b12506f837b13486f966fac7b1c4082185895871fd887088477e0957920d87907c8780ad88a0bda770b4921f8007b1c18017b1610017b1308017b1200017b19e0007b1ae800951700019518e0007b1bf000501054f4f6821840821748d48707821850d46808d478089888207b1638d46707977720d4870752078ffc8117503308207b1730501056a4f051077dfc821710821830c887078218586f8878781846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460798893878791f98893078791e98892878791d98892078791c98891878791b98891078791a9888087878190a0601821838821940d498081409e0ffffff00000000821a50d89a09821a4894a994895109d4fb64769877205207cbfb82173083772083687b17507b1858501058dbef5107b4fb821710821850be87077a16e0018318e00133090a05018117e001821858ac8793fb2894fb811810330701330933005a0a07019511f07b10087b158089959afed89a0b95b9ff949b88bc019ac295b5ff97cc20985b20c9cb0b979c2098a820d4c808d4b808975b20d4290c98cc20d4cb0bd4b8085208187b7a7b79087b75107b721882100882159511103200330820330750105c42ef510757330508000221032000022103180002210310000221030800024e487b7133070433082050105e17ef51072c4815200000001148151c48151848151448151048150c4815084815043308243307501060eeee5207040083583307013309243300620a0701951130ff7b10c8007b15c0007b16b8009515d0008411f08188510813521801193308330a330b33090128d9003309330a330b28d0009788209886208e689589ff9568ff7b18707b1988007b1980007b1728951790009518707b1978501064a58217a8007b17208217a0007b1718821790007b1710821798007b17089569fed869079578ff9487957aff8e779577ff7b17487b1a407b18389517509518307b193050106660ff821728821a58821850821268821c60821608c8a606821910c88909d8890bc8b608d3a806d8a80ada6b0a821b18c8cb0bc8ba0ad8ba03821620c86202d8cb0bc82b0bc83b0bd4a90cd4b806d46c0c98cc20d4a606976620d46c0c520c247b797b78087b7a107b7b18955130ff8210c8008215c0008216b8009511d00032003308203307501068afed510757330608000221032000022103180002210310000221030800024e487b7133070433082050106a84ed51072c4816200000001148161c48161848161448161048160c481608481604330824330750106c5bed5207040083683307013309240a07330733006e288ded330750106e88ed33070150107080ed00a58424092a2414524825a5223484444892a424440821049090a424d5242949a29044aa21a14621a556c8a4342222521222841012020809216a040424294935494a1229441a119124492249228d282580a4884892244922494224099124a9a4244994844892a424499224499224499224254992244992925493a424491169444492244985181111112291482409499254529224252192a4945292244992244992244992244992244992a4244992244992422435294d92a4d22425499294244952850ca534499254922449922449922449924a4a9224499224250951a8520821244929248410022421812449924296a41111912429a52444082184aa244992244a122249922449922449922449924488240124a988242192242949922449922449922449499224a5a4242549444444242192102184104244081111112222a68928499248242289904844844422119108498824499224499224495292244992244992244992244992244992244992244992244955922449258988882ac44842922455499224499284244992244992244992244992102109204929892485482249922449922449922449920092948a2485482249922449922449922449920092948a248548922449222222928888442491241111494224a99a244492a4944a92244922222222224292244992481222494a9224499224499224294992244992260920494589a4244492881a8924a549252925499224495292945248082104484202499224852c4923222225aaa44a529288441291482492a494244942922449922449922449922429494444944242082140121248922429644925858400",
});
const deployReceiptSolidity = await walletClient.waitForTransactionReceipt({
	hash: solidityContractHash,
});
const solidityContractAddress = deployReceiptSolidity.contractAddress;
console.log("Solidity Contract deployed:", solidityContractAddress);

const solidityContract = getContract({
	address: solidityContractAddress!,
	abi: solidityContractAbi,
	client: walletClient,
});

let resultSolidityCrossContractCall;
try {
	const resultSolidityCall = await solidityContract.read.fibonacci([n]);
	console.log("Result Solidity:", resultRustCall);

	resultSolidityCrossContractCall = await solidityContract.read.fibonacciRust([
		n,
		rustContractAddress,
	]);
	console.log("Result Cross Contract Call:", resultSolidityCrossContractCall);

	assert(resultSolidityCall === resultSolidityCrossContractCall, "Results should match");
} catch (error) {
	console.error("Error calling contract:", error);
}

assert(Number(resultRustCall) === resultSolidityCrossContractCall, "Results should match");
